{"version":3,"sources":["reducers/wordReducer.js","contexts/WordContext.js","components/Navbar.js","components/WordDetails.js","components/WordList.js","components/Form.js","components/Footer.js","components/WordsOfTheDay.js","App.js","serviceWorker.js","index.js"],"names":["wordReducer","state","action","type","word","vocab","definition","id","uuidv1","filter","WordContext","createContext","WordContextProvider","props","useState","setWord","setDefinition","axios","get","then","response","data","definitions","text","catch","err","console","log","useReducer","localData","localStorage","getItem","JSON","parse","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","WordDetails","wordsOfTheDay","onClick","WordList","map","key","NewForm","onSubmit","e","preventDefault","placeholder","onChange","target","Footer","WordsOfTheDay","addBtn","setAddBtn","document","querySelector","classList","add","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8e6c5e3b.chunk.js","sourcesContent":["import { v1 as uuidv1 } from \"uuid\";\n\nexport const wordReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_WORD\":\n      return [\n        ...state,\n        {\n          word: action.vocab.word,\n          definition: action.vocab.definition,\n          id: uuidv1()\n        }\n      ];\n    case \"REMOVE_WORD\":\n      return state.filter(word => word.id !== action.id);\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer, useEffect, useState } from \"react\";\nimport { wordReducer } from \"../reducers/wordReducer\";\nimport axios from \"axios\";\n\nexport const WordContext = createContext();\n\nconst WordContextProvider = props => {\n  const [word, setWord] = useState(\"\");\n  const [definition, setDefinition] = useState(\"\");\n\n  axios\n    .get(\n      \"https://api.wordnik.com/v4/words.json/wordOfTheDay?api_key=nerzt47ngk3ynvfpiy95yh2hznp66vxtgxo3se650b0utj5eu\"\n    )\n    .then(response => {\n      setWord(response.data.word);\n      setDefinition(response.data.definitions[0].text);\n    })\n    .catch(err => {\n      console.log(err);\n    });\n\n  const [vocab, dispatch] = useReducer(wordReducer, [], () => {\n    const localData = localStorage.getItem(\"vocab\");\n\n    return localData ? JSON.parse(localData) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"vocab\", JSON.stringify(vocab));\n  }, [vocab]);\n\n  return (\n    <WordContext.Provider value={{ vocab, word, definition, dispatch }}>\n      {props.children}\n    </WordContext.Provider>\n  );\n};\n\nexport default WordContextProvider;\n","import React, { useContext } from \"react\";\nimport { WordContext } from \"../contexts/WordContext\";\n\nconst Navbar = () => {\n  const { vocab } = useContext(WordContext);\n\n  return (\n    <div className=\"navbar\">\n      <h1>WordCard</h1>\n      <p>\n        You have{\" \"}\n        <span className=\"accent-txt\">\n          {vocab.length} word{vocab.length > 1 ? \"s\" : \"\"}\n        </span>{\" \"}\n        to memorize. Keep it up!\n      </p>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useContext } from \"react\";\nimport { WordContext } from \"../contexts/WordContext\";\n\nconst WordDetails = ({ vocab, wordsOfTheDay }) => {\n  const { dispatch } = useContext(WordContext);\n\n  return (\n    <li>\n      <div className=\"vocab\">\n        <div\n          className=\"word\"\n          onClick={() => dispatch({ type: \"REMOVE_WORD\", id: vocab.id })}\n        >\n          {vocab.word}\n        </div>\n        <div className=\"definition\">{vocab.definition}</div>\n      </div>\n    </li>\n  );\n};\n\nexport default WordDetails;\n","import React, { useContext } from \"react\";\nimport { WordContext } from \"../contexts/WordContext\";\nimport WordDetails from \"../components/WordDetails\";\n\nconst WordList = () => {\n  const { vocab } = useContext(WordContext);\n\n  return vocab.length > 0 ? (\n    <div className=\"word-list\">\n      <ul>\n        {vocab.map(word => {\n          return <WordDetails vocab={word} key={word.id} />;\n        })}\n      </ul>\n    </div>\n  ) : (\n    <div className=\"empty\">Hooray, no words to study.</div>\n  );\n};\n\nexport default WordList;\n","import React, { useContext, useState } from \"react\";\nimport { WordContext } from \"../contexts/WordContext\";\n\nconst NewForm = () => {\n  const { dispatch } = useContext(WordContext);\n  const [word, setWord] = useState(\"\");\n  const [definition, setDefinition] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (word) {\n      dispatch({ type: \"ADD_WORD\", vocab: { word, definition } });\n      setWord(\"\");\n      setDefinition(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"input\">\n        <input\n          className=\"word-input\"\n          type=\"text\"\n          placeholder=\"Word\"\n          value={word}\n          onChange={e => setWord(e.target.value)}\n        />\n        <input\n          className=\"definition-input\"\n          type=\"text\"\n          placeholder=\"Definition\"\n          value={definition}\n          onChange={e => setDefinition(e.target.value)}\n        />\n      </div>\n      <input className=\"submit\" type=\"submit\" value=\"Add this vocab\" />\n    </form>\n  );\n};\n\nexport default NewForm;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      Copyright Â© 2020 Designed and Developed by Dongyeon Lee\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useContext, useState } from \"react\";\nimport { WordContext } from \"../contexts/WordContext\";\n\nconst WordsOfTheDay = () => {\n  const { word, definition, dispatch } = useContext(WordContext);\n  const [addBtn, setAddBtn] = useState(\"+\");\n\n  const addWordHandler = e => {\n    dispatch({\n      type: \"ADD_WORD\",\n      vocab: {\n        word,\n        definition\n      }\n    });\n\n    setAddBtn(\"\");\n  };\n\n  const closeWordHandler = () => {\n    const closeBtnActive = document.querySelector(\".words-of-the-day\");\n\n    closeBtnActive.classList.add(\"close-btn-active\");\n  };\n\n  return (\n    <div className=\"words-of-the-day\">\n      <>\n        <h3>Word of the day</h3>\n        <p className=\"word-of-the-day\">{word}</p>\n        <p>{definition}</p>\n        <div className=\"add-btn\" onClick={addWordHandler}>\n          {addBtn}\n        </div>\n        <div className=\"close-btn\" onClick={closeWordHandler}>\n          &#8592;\n        </div>\n      </>\n    </div>\n  );\n};\n\nexport default WordsOfTheDay;\n","import React from \"react\";\nimport WordContextProvider from \"./contexts/WordContext\";\nimport Navbar from \"./components/Navbar\";\nimport WordList from \"./components/WordList\";\nimport NewForm from \"./components/Form\";\nimport Footer from \"./components/Footer\";\nimport WordOfTheDay from \"./components/WordsOfTheDay\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Footer />\n      <WordContextProvider>\n        <WordOfTheDay />\n        <div className=\"App\">\n          <Navbar />\n          <NewForm />\n          <WordList />\n        </div>\n      </WordContextProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}