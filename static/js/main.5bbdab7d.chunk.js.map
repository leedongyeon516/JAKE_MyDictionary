{"version":3,"sources":["contexts/WordContext.js","components/Navbar.js","components/WordDetails.js","components/WordList.js","components/Form.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["WordContext","createContext","WordContextProvider","props","localData","localStorage","getItem","useState","word","definition","id","uuidv1","todayVocab","JSON","parse","vocab","setVocab","useEffect","setItem","stringify","Provider","value","addWord","removeWord","filter","children","Navbar","useContext","className","length","WordDetails","onClick","WordList","map","key","NewForm","setWord","setDefinition","onSubmit","e","preventDefault","type","placeholder","onChange","target","Footer","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAGaA,EAAcC,0BA8BZC,EA5Ba,SAAAC,GAC1B,IAAMC,EAAYC,aAAaC,QAAQ,SADJ,EAECC,mBAAS,CAC3C,CAAEC,KAAM,IAAKC,WAAY,MAAOC,GAAIC,iBAHH,mBAE5BC,EAF4B,aAKTL,mBAASM,KAAKC,MAAMV,KALX,mBAK5BW,EAL4B,KAKrBC,EALqB,KAOnCC,qBAAU,WACRZ,aAAaa,QAAQ,QAASL,KAAKM,UAAUJ,MAC5C,CAACA,IAYJ,OACE,kBAACf,EAAYoB,SAAb,CAAsBC,MAAO,CAAET,aAAYG,QAAOO,QAXpC,SAACd,EAAMC,GACjBD,GACFQ,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEP,OAAMC,aAAYC,GAAIC,mBASaY,WAL1C,SAAAb,GACjBM,EAASD,EAAMS,QAAO,SAAAhB,GAAI,OAAIA,EAAKE,KAAOA,SAKvCP,EAAMsB,WCREC,EAjBA,WAAO,IACZX,EAAUY,qBAAW3B,GAArBe,MAER,OACE,yBAAKa,UAAU,UACb,yCACA,sCACW,IACT,0BAAMA,UAAU,cACbb,EAAMc,OADT,QACsBd,EAAMc,OAAS,EAAI,IAAM,IACvC,IAJV,8BCKSC,EAXK,SAAC,GAAe,IAAbf,EAAY,EAAZA,MACbQ,EAAeI,qBAAW3B,GAA1BuB,WAER,OACE,wBAAIQ,QAAS,kBAAMR,EAAWR,EAAML,MAClC,yBAAKkB,UAAU,QAAQb,EAAMP,MAC7B,yBAAKoB,UAAU,cAAcb,EAAMN,cCW1BuB,EAhBE,WAAO,IACdjB,EAAUY,qBAAW3B,GAArBe,MAER,OAAOA,EAAMc,OACX,yBAAKD,UAAU,aACb,4BACGb,EAAMkB,KAAI,SAAAzB,GACT,OAAO,kBAAC,EAAD,CAAaO,MAAOP,EAAM0B,IAAK1B,EAAKE,UAKjD,yBAAKkB,UAAU,SAAf,+BCmBWO,EAhCC,WAAO,IACbb,EAAYK,qBAAW3B,GAAvBsB,QADY,EAEIf,mBAAS,IAFb,mBAEbC,EAFa,KAEP4B,EAFO,OAGgB7B,mBAAS,IAHzB,mBAGbE,EAHa,KAGD4B,EAHC,KAWpB,OACE,0BAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACFlB,EAAQd,EAAMC,GACd2B,EAAQ,IACRC,EAAc,MAKZ,yBAAKT,UAAU,SACb,2BACEa,KAAK,OACLC,YAAY,OACZrB,MAAOb,EACPmC,SAAU,SAAAJ,GAAC,OAAIH,EAAQG,EAAEK,OAAOvB,UAElC,2BACEoB,KAAK,OACLC,YAAY,aACZrB,MAAOZ,EACPkC,SAAU,SAAAJ,GAAC,OAAIF,EAAcE,EAAEK,OAAOvB,WAG1C,2BAAOoB,KAAK,SAASpB,MAAM,qBCpBlBwB,EARA,WACb,OACE,yBAAKjB,UAAU,UAAf,+DCkBWkB,MAff,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,yBAAKnB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCHUoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5bbdab7d.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\n\nexport const WordContext = createContext();\n\nconst WordContextProvider = props => {\n  const localData = localStorage.getItem(\"vocab\");\n  const [todayVocab, setTodayVocab] = useState([\n    { word: \"a\", definition: \"abc\", id: uuidv1() }\n  ]);\n  const [vocab, setVocab] = useState(JSON.parse(localData));\n\n  useEffect(() => {\n    localStorage.setItem(\"vocab\", JSON.stringify(vocab));\n  }, [vocab]);\n\n  const addWord = (word, definition) => {\n    if (word) {\n      setVocab([...vocab, { word, definition, id: uuidv1() }]);\n    }\n  };\n\n  const removeWord = id => {\n    setVocab(vocab.filter(word => word.id !== id));\n  };\n\n  return (\n    <WordContext.Provider value={{ todayVocab, vocab, addWord, removeWord }}>\n      {props.children}\n    </WordContext.Provider>\n  );\n};\n\nexport default WordContextProvider;\n","import React, { useContext } from \"react\";\nimport { WordContext } from \"../contexts/WordContext\";\n\nconst Navbar = () => {\n  const { vocab } = useContext(WordContext);\n\n  return (\n    <div className=\"navbar\">\n      <h1>FlashCard</h1>\n      <p>\n        You have{\" \"}\n        <span className=\"accent-txt\">\n          {vocab.length} word{vocab.length > 1 ? \"s\" : \"\"}\n        </span>{\" \"}\n        to memorize. Keep it up!\n      </p>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useContext } from \"react\";\nimport { WordContext } from \"../contexts/WordContext\";\n\nconst WordDetails = ({ vocab }) => {\n  const { removeWord } = useContext(WordContext);\n\n  return (\n    <li onClick={() => removeWord(vocab.id)}>\n      <div className=\"word\">{vocab.word}</div>\n      <div className=\"definition\">{vocab.definition}</div>\n    </li>\n  );\n};\n\nexport default WordDetails;\n","import React, { useContext } from \"react\";\nimport { WordContext } from \"../contexts/WordContext\";\nimport WordDetails from \"../components/WordDetails\";\n\nconst WordList = () => {\n  const { vocab } = useContext(WordContext);\n\n  return vocab.length ? (\n    <div className=\"word-list\">\n      <ul>\n        {vocab.map(word => {\n          return <WordDetails vocab={word} key={word.id} />;\n        })}\n      </ul>\n    </div>\n  ) : (\n    <div className=\"empty\">Hooray, no words to study.</div>\n  );\n};\n\nexport default WordList;\n","import React, { useContext, useState } from \"react\";\nimport { WordContext } from \"../contexts/WordContext\";\n\nconst NewForm = () => {\n  const { addWord } = useContext(WordContext);\n  const [word, setWord] = useState(\"\");\n  const [definition, setDefinition] = useState(\"\");\n  const handleSubmit = e => {\n    e.preventDefault();\n    addWord(word, definition);\n    setWord(\"\");\n    setDefinition(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"input\">\n        <input\n          type=\"text\"\n          placeholder=\"Word\"\n          value={word}\n          onChange={e => setWord(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Definition\"\n          value={definition}\n          onChange={e => setDefinition(e.target.value)}\n        />\n      </div>\n      <input type=\"submit\" value=\"Add This Vocab\" />\n    </form>\n  );\n};\n\nexport default NewForm;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      Copyright Â© 2020 Designed and Developed by Dongyeon Lee\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport WordContextProvider from \"./contexts/WordContext\";\nimport Navbar from \"./components/Navbar\";\nimport WordList from \"./components/WordList\";\nimport NewForm from \"./components/Form\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Footer />\n      <div className=\"App\">\n        <WordContextProvider>\n          <Navbar />\n          <NewForm />\n          <WordList />\n        </WordContextProvider>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}