{"ast":null,"code":"var _jsxFileName = \"/Users/lee/DictReactJS_DYLEE/dict-app/src/contexts/WordContext.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nexport const WordContext = createContext();\n\nconst WordContextProvider = props => {\n  const localData = localStorage.getItem(\"vocab\");\n  const [vocab, setVocab] = useState([]);\n  useEffect(() => {\n    localStorage.setItem(\"vocab\", JSON.stringify(vocab));\n  }, [vocab]);\n\n  const addWord = (word, definition) => {\n    setVocab([...vocab, {\n      word,\n      definition,\n      id: uuidv1()\n    }]);\n  };\n\n  const removeWord = id => {\n    setVocab(vocab.filter(word => word.id !== id));\n  };\n\n  return /*#__PURE__*/React.createElement(WordContext.Provider, {\n    value: {\n      vocab,\n      addWord,\n      removeWord\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default WordContextProvider;","map":{"version":3,"sources":["/Users/lee/DictReactJS_DYLEE/dict-app/src/contexts/WordContext.js"],"names":["React","createContext","useState","useEffect","v1","uuidv1","WordContext","WordContextProvider","props","localData","localStorage","getItem","vocab","setVocab","setItem","JSON","stringify","addWord","word","definition","id","removeWord","filter","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,OAAO,MAAMC,WAAW,GAAGL,aAAa,EAAjC;;AAEP,MAAMM,mBAAmB,GAAGC,KAAK,IAAI;AACnC,QAAMC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAA9B;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAIA,QAAMK,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,KAAsB;AACpCN,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW;AAAEM,MAAAA,IAAF;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA,EAAE,EAAEf,MAAM;AAA9B,KAAX,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMgB,UAAU,GAAGD,EAAE,IAAI;AACvBP,IAAAA,QAAQ,CAACD,KAAK,CAACU,MAAN,CAAaJ,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYA,EAAjC,CAAD,CAAR;AACD,GAFD;;AAIA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAER,MAAAA,KAAF;AAASK,MAAAA,OAAT;AAAkBI,MAAAA;AAAlB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,KAAK,CAACe,QADT,CADF;AAKD,CArBD;;AAuBA,eAAehB,mBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\n\nexport const WordContext = createContext();\n\nconst WordContextProvider = props => {\n  const localData = localStorage.getItem(\"vocab\");\n  const [vocab, setVocab] = useState([]);\n\n  useEffect(() => {\n    localStorage.setItem(\"vocab\", JSON.stringify(vocab));\n  }, [vocab]);\n\n  const addWord = (word, definition) => {\n    setVocab([...vocab, { word, definition, id: uuidv1() }]);\n  };\n\n  const removeWord = id => {\n    setVocab(vocab.filter(word => word.id !== id));\n  };\n\n  return (\n    <WordContext.Provider value={{ vocab, addWord, removeWord }}>\n      {props.children}\n    </WordContext.Provider>\n  );\n};\n\nexport default WordContextProvider;\n"]},"metadata":{},"sourceType":"module"}